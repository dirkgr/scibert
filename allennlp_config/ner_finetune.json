{
  "random_seed": std.parseInt(std.extVar("SEED")),
  "pytorch_seed": std.parseInt(std.extVar("PYTORCH_SEED")),
  "numpy_seed": std.parseInt(std.extVar("NUMPY_SEED")),
  "dataset_reader": {
    "type": "conll2003",
    "tag_label": "ner",
    "coding_scheme": "BIOUL",
    "token_indexers": {
      "transformer": {
          "type": "pretrained_transformer_mismatched",
          "model_name": std.extVar("BERT_VOCAB")
      }
    }
  },
  "train_data_path": std.extVar("TRAIN_PATH"),
  "validation_data_path": std.extVar("DEV_PATH"),
  "test_data_path": std.extVar("TEST_PATH"),
  "evaluate_on_test": true,
  "model": {
    "type": "bert_crf_tagger",
    "label_encoding": "BIOUL",
    "constrain_crf_decoding": true,
    "calculate_span_f1": true,
    "dropout": 0.1,
    "include_start_end_transitions": false,
    "text_field_embedder": {
        "token_embedders": {
            "transformer": {
                "type": "pretrained_transformer_mismatched",
                "model_name": std.extVar("BERT_WEIGHTS")
            }
        }
    }
  },
 "data_loader": {
    "batch_sampler": {
        "type": "bucket",
        "batch_size": 32
    }
  },
  "trainer": {
    "optimizer": {
        "type": "adamw",
        "lr": std.parseJson(std.extVar("LEARNING_RATE")),
        "parameter_groups": [
          [["bias", "LayerNorm.bias", "LayerNorm.weight", "layer_norm.weight"], {"weight_decay": 0.0}]
        ]
    },
    "validation_metric": "+f1-measure-overall",
    "num_epochs": std.parseInt(std.extVar("NUM_EPOCHS")),
    "learning_rate_scheduler": {
      "type": "slanted_triangular",
      "num_epochs": std.parseInt(std.extVar("NUM_EPOCHS")),
      "num_steps_per_epoch": std.parseInt(std.extVar("NUM_STEPS_PER_EPOCH"))
    },
    "cuda_device": std.parseInt(std.extVar("CUDA_DEVICE"))
  }
}

